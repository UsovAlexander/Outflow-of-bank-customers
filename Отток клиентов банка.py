#!/usr/bin/env python
# coding: utf-8

# –ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä!)
# <br> –ú–µ–Ω—è –∑–æ–≤—É—Ç –î—É–æ–ª–∞–Ω üëã –ë—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –¥–æ–≤–µ–¥–µ–º –µ–≥–æ –¥–æ –∏–¥–µ–∞–ª–∞ üòâ
# <br> –î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–∞ ¬´—Ç—ã¬ª, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.
# <br> –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (¬´–∏—Å–ø—Ä–∞–≤–∏–ª¬ª, ¬´–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É¬ª, ...)
# <br> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–Ω–∏ –±—É–¥—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–≤—å—é.
# 
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤ <font color='green'>–∑–µ–ª–µ–Ω–æ–π</font>, <font color='blue'>—Å–∏–Ω–µ–π</font> –∏–ª–∏ <font color='red'>–∫—Ä–∞—Å–Ω–æ–π</font> —Ä–∞–º–∫–∞—Ö:
# 
# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b> –ï—Å–ª–∏ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –æ—Ç–ª–∏—á–Ω–æ
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>‚ö†Ô∏è –°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏—Ç—å
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>‚ùå –ó–∞–º–µ—á–∞–Ω–∏–µ:</b> –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# </div>
# 
# –†–∞–±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
# 
# -------------------
# 
# –ë—É–¥–µ—Ç –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –ø–æ–º–µ—á–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
# 
# <div class="alert alert-block alert-info">
# <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> ...
# </div>
# 
# <div class="alert alert-block alert-info">
# <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> –ë—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ...
# </div>

# <h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class="tocSkip"></span></h1>
# <div class="toc"><ul class="toc-item"><li><span><a href="#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö" data-toc-modified-id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span><ul class="toc-item"><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∫–∞-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∫–∞-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤-1.1"><span class="toc-item-num">1.1&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</a></span></li><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∫–∞-–ø—Ä–æ–ø—É—Å–∫–æ–≤" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∫–∞-–ø—Ä–æ–ø—É—Å–∫–æ–≤-1.2"><span class="toc-item-num">1.2&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a></span></li><li><span><a href="#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤" data-toc-modified-id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤-1.3"><span class="toc-item-num">1.3&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</a></span></li></ul></li><li><span><a href="#–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏" data-toc-modified-id="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</a></span></li><li><span><a href="#–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º" data-toc-modified-id="–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º</a></span><ul class="toc-item"><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏-–ø—Ä–∏-—É–≤–µ–ª–∏—á–µ–Ω–∏–∏-–≤—ã–±–æ—Ä–∫–∏" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏-–ø—Ä–∏-—É–≤–µ–ª–∏—á–µ–Ω–∏–∏-–≤—ã–±–æ—Ä–∫–∏-3.1"><span class="toc-item-num">3.1&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏</a></span></li><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏-–ø—Ä–∏-—É–º–µ–Ω—å—à–µ–Ω–∏–∏-–≤—ã–±–æ—Ä–∫–∏" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏-–ø—Ä–∏-—É–º–µ–Ω—å—à–µ–Ω–∏–∏-–≤—ã–±–æ—Ä–∫–∏-3.2"><span class="toc-item-num">3.2&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏</a></span></li><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏,-–≤–∑–≤–µ—Å–∏–≤-–∫–ª–∞—Å—Å—ã-–ø—Ä–∏-–ø–æ–º–æ—â–∏-–∞—Ä–≥—É–º–µ–Ω—Ç–∞-class_weight" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∏–º-–º–æ–¥–µ–ª–∏,-–≤–∑–≤–µ—Å–∏–≤-–∫–ª–∞—Å—Å—ã-–ø—Ä–∏-–ø–æ–º–æ—â–∏-–∞—Ä–≥—É–º–µ–Ω—Ç–∞-class_weight-3.3"><span class="toc-item-num">3.3&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏, –≤–∑–≤–µ—Å–∏–≤ –∫–ª–∞—Å—Å—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ class_weight</a></span></li></ul></li><li><span><a href="#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏" data-toc-modified-id="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span><ul class="toc-item"><li><span><a href="#–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º-–º–æ–¥–µ–ª—å,-–ø–æ–∫–∞–∑–∞–≤—à—É—é-–ª—É—á—à—É—é-–º–µ—Ç—Ä–∏–∫—É-F1." data-toc-modified-id="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º-–º–æ–¥–µ–ª—å,-–ø–æ–∫–∞–∑–∞–≤—à—É—é-–ª—É—á—à—É—é-–º–µ—Ç—Ä–∏–∫—É-F1.-4.1"><span class="toc-item-num">4.1&nbsp;&nbsp;</span>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å, –ø–æ–∫–∞–∑–∞–≤—à—É—é –ª—É—á—à—É—é –º–µ—Ç—Ä–∏–∫—É F1.</a></span></li><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∏–º-–∑–Ω–∞—á–µ–Ω–∏–µ-–º–µ—Ç—Ä–∏–∫–∏-AUC-ROC-–ª—É—á—à–µ–π-–º–æ–¥–µ–ª–∏" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∏–º-–∑–Ω–∞—á–µ–Ω–∏–µ-–º–µ—Ç—Ä–∏–∫–∏-AUC-ROC-–ª—É—á—à–µ–π-–º–æ–¥–µ–ª–∏-4.2"><span class="toc-item-num">4.2&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ AUC-ROC –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏</a></span></li></ul></li><li><span><a href="#–û–±—â–∏–π-–≤—ã–≤–æ–¥" data-toc-modified-id="–û–±—â–∏–π-–≤—ã–≤–æ–¥-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>–û–±—â–∏–π –≤—ã–≤–æ–¥</a></span></li></ul></div>

# # –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

# –ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.
# 
# –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º. 
# 
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
# 
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.
# 
# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[1]:


import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import plot_confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.utils import shuffle
import matplotlib.pyplot as plt


# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –ò–º–ø–æ—Ä—Ç –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ üëç
# </div>

# In[2]:


df = pd.read_csv('/datasets/Churn.csv')


# In[3]:


df = df.drop(['Surname', 'RowNumber', 'CustomerId'], axis=1)


# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ - —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ üëç
# </div>

# ### –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

# In[4]:


df.duplicated().sum()


# ### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤

# In[5]:


df.isna().sum()


# In[6]:


df.describe()


# In[7]:


df[~df['Tenure'].isna()].describe()


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–º–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–∏ —Å–∫—Ä—ã–≤–∞–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ Tenure –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ–º –æ—Ç –Ω–∏—Ö –∏–∑–±–∞–≤–∏—Ç—å—Å—è.

# In[8]:


df = df.dropna().reset_index(drop=True)


# <div class="alert alert-block alert-warning">
# <b>‚ö†Ô∏è –°–æ–≤–µ—Ç:</b>
# 
# –ü–æ—Å–º–æ—Ç—Ä–∏ –µ—â–µ –Ω–∞ —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏:
# 
# 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–æ–≤–Ω–æ–µ, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∑–∞–º–µ–Ω–∏—Ç—å 909 –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–¥–∏–∞–Ω–æ–π, —Ç–æ –º—ã —É–≤–µ–ª–∏—á–∏–º –≤ 2 —Ä–∞–∑–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 5 –ª–µ—Ç. –≠—Ç–æ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, —Ç–æ–≥–¥–∞ –º—ã —Å–Ω–∏–∑–∏–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
# 
# 2. –¢–∞–∫ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —ç—Ç–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º. –ü—Ä–æ–ø—É—Å–∫–∏ –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∫–∞–∫ –∑–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ–º -1). –ó–∞—Ç–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö Tenure –Ω–∞ object –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É OHE.
# 
# 3. –ó–∞–ø–æ–ª–Ω–∏—Ç—å "0", —Å—á–∏—Ç–∞—è, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã.
# </div>

# <div class="alert alert-block alert-info">
# <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –Ø –¥—É–º–∞–ª –æ —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —ç—Ç–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ, –Ω–æ –∏–∑-–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –æ–ø–∏—Å–∞–ª –≤ 1 –ø—É–Ω–∫—Ç–µ, –≤—Å–µ –æ–Ω–∏ –¥–ª—è –º–µ–Ω—è –ø–æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏. –í–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è, —è –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏. –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –±—É–¥—É—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏, –Ω—É–∂–Ω–æ –ø–æ—ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
# </div>

# ### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

# <div class="alert alert-block alert-info">
# <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∏–ª –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è.
# </div>

# –†–∞–∑–æ–±—å–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–º –Ω–∞ —Ç—Ä–∏ –≤—ã–±–æ—Ä–∫–∏

# In[9]:


get_ipython().system('pip install fast_ml')
from fast_ml.model_development import train_valid_test_split

X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(df, target = 'Exited', 
                                                                            train_size=0.6, valid_size=0.2, test_size=0.2)


# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b> 
# 
# –î–∞–Ω–Ω—ã–µ –ø–æ–¥–µ–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ üëç
# </div>

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ—Ö–Ω–∏–∫–∏ OHE

# <div class="alert alert-block alert-danger">
# <b>‚ùå –ó–∞–º–µ—á–∞–Ω–∏–µ:</b>
# 
# –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è. –¢–∞–∫ —É –Ω–∞—Å –Ω–µ –±—É–¥–µ—Ç —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
# 
# –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å https://datascience.stackexchange.com/questions/108663/why-label-encoding-before-split-is-data-leakage
#   
# –°—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É. –ö–æ–≥–¥–∞ –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ fit-–∏—Ç—Å—è –Ω–∞ –≤—Å–µ–π –≤—ã–±–æ—Ä–∫–µ, —Ç–∞–º –≤–µ–¥—å –µ—Å—Ç—å –∏ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –Ω–∞–∑—ã–≤–∞—é—Ç —É—Ç–µ—á–∫–æ–π –∏–ª–∏ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–Ω–∏–µ–º. 
# 
# P.S. –ø–æ—Å–ª–µ –ø—Ä—è–º–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–∞—Ö –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è. –¢–æ–≥–¥–∞ –ª–∏—à–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
# </div>
# 
# ```python
# features_train = pd.get_dummies(features_train, drop_first=True)
# features_valid = pd.get_dummies(features_valid, drop_first=True)
# features_test = pd.get_dummies(features_test, drop_first=True)
# ```

# <div class="alert alert-block alert-success">
# <b>V2 ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</b>
# </div>

# In[10]:


X_train = pd.get_dummies(X_train, drop_first=True)
X_valid = pd.get_dummies(X_valid, drop_first=True)
X_test = pd.get_dummies(X_test, drop_first=True)


# In[16]:


X_train.head()


# In[17]:


X_valid.head()


# In[18]:


X_test.head()


# –ü–æ—Ç–µ—Ä—å —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å–ª–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–±—Ä–æ—Å–æ–º –∑–Ω–∞—á–µ–Ω–∏–π

# In[19]:


numeric = ['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary']

scaler = StandardScaler()
scaler.fit(X_train[numeric])
X_train[numeric] = scaler.transform(X_train[numeric])


# In[20]:


scaler.fit(X_valid[numeric])
X_valid[numeric] = scaler.transform(X_valid[numeric])


# In[22]:


scaler.fit(X_test[numeric])
X_test[numeric] = scaler.transform(X_test[numeric])


# <div class="alert alert-block alert-danger">
# <b>‚ùå –ó–∞–º–µ—á–∞–Ω–∏–µ:</b>
# 
# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. Scaler –æ–±—É—á–∞–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ, –∑–∞—Ç–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–º–µ–Ω—è–µ—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é –∫–æ –≤—Å–µ–º –≤—ã–±–æ—Ä–∫–∞–º. –¢–æ—á–Ω–æ –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π. –¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
# </div>

# <div class="alert alert-block alert-success">
# <b>V2 ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</b>
# </div>

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# In[23]:


y_train.value_counts(normalize=True)


# –í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤. –ò—Å—Å–ª–µ–¥—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–ª–∏—è–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –í–∏–¥–µ–Ω —è–≤–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –≤ –ø–æ–ª—å–∑—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ï—Å–ª–∏ –º—ã –±—É–¥–µ–º –≤—Å–µ—Ö –ª—é–¥–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ —É–π–¥—É—Ç –∏–∑ –±–∞–Ω–∫–∞, —Ç–æ –≤ 80% —Å–ª—É—á–∞–µ–≤ –º—ã –±—É–¥–µ–º –ø—Ä–∞–≤—ã.
# </div>

# **–ù–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏**

# In[24]:


def clf_models(X_train, y_train, X_valid, y_valid):
    f1 = []
    depth_value = ['-']
    n_estimators_value = ['-', '-']
    models = []
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é
    model_lr = LogisticRegression(random_state=12345, solver='lbfgs', max_iter=1000)
    model_lr.fit(X_train, y_train) 
    y_pred = model_lr.predict(X_valid) 
    result = f1_score(y_valid, y_pred)
    f1.append(result)
    models.append(model_lr)
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
    best_model_dtc = None
    best_result = 0
    best_depth = 0
    for depth in range(1, 11):
        model = DecisionTreeClassifier(random_state=12345, max_depth=depth) 
        model.fit(X_train, y_train) 
        y_pred = model.predict(X_valid) 
        result = f1_score(y_valid, y_pred) 
        if result > best_result:
            best_model_dtc = model
            best_depth = depth
            best_result = result
    f1.append(result)
    depth_value.append(best_depth)
    models.append(best_model_dtc)
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
    best_model_rfc = None
    best_result = 0
    best_est = 0
    best_depth = 0
    for est in range(1, 101, 10):
        for depth in range (1, 11):
            model = RandomForestClassifier(random_state=12345, n_estimators=est, max_depth=depth) 
            model.fit(X_train, y_train) 
            y_pred = model.predict(X_valid) 
            result = f1_score(y_valid, y_pred) 
            if result > best_result:
                best_model_rfc = model
                best_result = result
                best_est = est
                best_depth = depth
    f1.append(result)
    depth_value.append(best_depth)
    n_estimators_value.append(best_est)
    models.append(best_model_rfc)
    

    df = pd.DataFrame({'clf':['Logic', 'Tree', 'Forest'], 'f1':f1, 'depth':depth_value, 
                       'n_estimators': n_estimators_value})
    print(df)

    fig, axes = plt.subplots(1, 3, figsize=(15,5))

    for model, ax in zip(models, axes.flatten()):
        plot_confusion_matrix(model, X_valid, y_valid, normalize='true', ax=ax, cmap='Blues')
        ax.title.set_text(type(model).__name__)
    plt.tight_layout()  
    plt.show()
    
    return models


# In[25]:


clf_models(X_train, y_train, X_valid, y_valid)


# **–í—ã–≤–æ–¥:** –û–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –∏–∑-–∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ TPR –≤ –ª—É—á—à–µ–º —Å–ª—É—á–∞–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.49, –∞ F1 –Ω–µ –ø—Ä–∏–≤—ã—à–∞–µ—Ç 0,55, —á—Ç–æ –Ω–µ–ª—å–∑—è –Ω–∞–∑–≤–∞—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∏—Å–ø—Ä–∞–≤–∏–≤ –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤.

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ üëç
# </div>

# ## –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º

# ### –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏

# In[26]:


#–§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏
def upsample(X, y, repeat):
    X_zeros = X[y == 0]
    X_ones = X[y == 1]
    y_zeros = y[y == 0]
    y_ones = y[y == 1]

    X_upsampled = pd.concat([X_zeros] + [X_ones] * repeat)
    y_upsampled = pd.concat([y_zeros] + [y_ones] * repeat)
    
    X_upsampled, y_upsampled = shuffle(X_upsampled, y_upsampled, random_state=12345)
    
    return X_upsampled, y_upsampled


# In[27]:


X_train_up, y_train_up = upsample(X_train, y_train, 4)


# In[28]:


models_up = clf_models(X_train_up, y_train_up, X_valid, y_valid)


# **–í—ã–≤–æ–¥:** –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ 1 –∫–ª–∞—Å—Å–∞, –º–µ—Ç—Ä–∏–∫–∞ F1 –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 0,6.

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ - –∫–ª–∞—Å—Å—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã üëç 
# </div>

# ### –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∫–∏

# In[29]:


# –§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏
def downsample(X, y, fraction):
    X_zeros = X[y == 0]
    X_ones = X[y == 1]
    y_zeros = y[y == 0]
    y_ones = y[y == 1]

    X_downsampled = pd.concat([X_zeros.sample(frac=fraction, random_state=12345)] + [X_ones])
    y_downsampled = pd.concat([y_zeros.sample(frac=fraction, random_state=12345)] + [y_ones])
    
    X_downsampled, y_downsampled = shuffle(X_downsampled, y_downsampled, random_state=12345)
    
    return X_downsampled, y_downsampled

X_train_down, y_train_down = downsample(X_train, y_train, 0.2)


# In[30]:


models_down = clf_models(X_train_down, y_train_down, X_valid, y_valid)


# **–í—ã–≤–æ–¥:** TPR —Å—Ç–∞–ª –µ—â–µ –≤—ã—à–µ, –æ–¥–Ω–∞–∫–æ, —Ç–æ–∂–µ —Å–∞–º–æ–µ –Ω–µ–ª—å–∑—è —Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ F1, —Ç.–∫. FP —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ.

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ —Ç–æ–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ üëç 
# </div>

# ### –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏, –≤–∑–≤–µ—Å–∏–≤ –∫–ª–∞—Å—Å—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ class_weight

# In[31]:


def clf_models_class_weight(X_train, y_train, X_valid, y_valid):
    f1 = []
    depth_value = ['-']
    n_estimators_value = ['-', '-']
    models = []
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é
    model_lr = LogisticRegression(random_state=12345, solver='lbfgs', max_iter=1000, class_weight='balanced')
    model_lr.fit(X_train, y_train) 
    y_pred = model_lr.predict(X_valid) 
    result = f1_score(y_valid, y_pred)
    f1.append(result)
    models.append(model_lr)
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
    best_model_dtc = None
    best_result = 0
    best_depth = 0
    for depth in range(1, 11):
        model = DecisionTreeClassifier(random_state=12345, max_depth=depth, class_weight='balanced') 
        model.fit(X_train, y_train) 
        y_pred = model.predict(X_valid) 
        result = f1_score(y_valid, y_pred) 
        if result > best_result:
            best_model_dtc = model
            best_depth = depth
            best_result = result
    f1.append(result)
    depth_value.append(best_depth)
    models.append(best_model_dtc)
    
    #–ü—Ä–æ–≤–µ—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
    best_model_rfc = None
    best_result = 0
    best_est = 0
    best_depth = 0
    for est in range(1, 101, 10):
        for depth in range (1, 11):
            model = RandomForestClassifier(random_state=12345, n_estimators=est, max_depth=depth, class_weight='balanced') 
            model.fit(X_train, y_train) 
            y_pred = model.predict(X_valid) 
            result = f1_score(y_valid, y_pred) 
            if result > best_result:
                best_model_rfc = model
                best_result = result
                best_est = est
                best_depth = depth
    f1.append(result)
    depth_value.append(best_depth)
    n_estimators_value.append(best_est)
    models.append(best_model_rfc)
    
    df = pd.DataFrame({'clf':['Logic', 'Tree', 'Forest'], 'f1':f1, 'depth':depth_value, 
                       'n_estimators': n_estimators_value})
    print(df)

    fig, axes = plt.subplots(1, 3, figsize=(15,5))

    for model, ax in zip(models, axes.flatten()):
        plot_confusion_matrix(model, X_valid, y_valid, normalize='true', ax=ax, cmap='Blues')
        ax.title.set_text(type(model).__name__)
    plt.tight_layout()  
    plt.show()
    
    return models


# In[32]:


models_class_weight = clf_models_class_weight(X_train, y_train, X_valid, y_valid)


# **–í—ã–≤–æ–¥:** TPR —Ö—É–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º, —Ö–æ—Ç—è F1 –ª—É—á—à–µ. 

# **–û–±—â–∏–π –≤—ã–≤–æ–¥: –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç F1 –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∑–∞–ª –º–æ–¥–µ–ª—å RandomForestClassifier, —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–∏–º–µ–Ω—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –ø—Ä–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–º –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ FPR.**

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –ü–æ –º–æ–¥–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç!) –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –æ—Ç–ª–∏—á–Ω–æ üëç
# </div>

# ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

# ### –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å, –ø–æ–∫–∞–∑–∞–≤—à—É—é –ª—É—á—à—É—é –º–µ—Ç—Ä–∏–∫—É F1.

# In[40]:


for model in models_up: 
    print(type(model).__name__, f1_score(y_test, model.predict(X_test)))


# **–í—ã–≤–æ–¥:** –∑–Ω–∞—á–µ–Ω–∏–µ F1 –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —É –º–æ–¥–µ–ª–∏ RandomForestClassifier –≤—ã—à–µ 0.59, –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ —Å —ç—Ç–∏–º —É–∂–µ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.

# <div class="alert alert-block alert-success">
# <b>‚úîÔ∏è –£—Å–ø–µ—Ö:</b>
# 
# –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üëç 
# </div>

# ### –ü—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ AUC-ROC –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏

# In[41]:


probabilities_test = model.predict_proba(X_test)
probabilities_one_test = probabilities_test[:, 1]

fpr, tpr, thresholds = roc_curve(y_test, probabilities_one_test)

plt.figure()

plt.plot(fpr, tpr)

plt.plot([0, 1], [0, 1], linestyle='--')

plt.xlim([0,1])
plt.ylim([0,1])

plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.grid()
plt.title("ROC-–∫—Ä–∏–≤–∞—è")

plt.show()


# In[42]:


roc_auc_score(y_test, probabilities_one_test)


# –ù–∞–π–¥–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É TPR –∏ FPR –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö.

# In[43]:


df_roc = pd.DataFrame({'fpr': fpr, 'tpr':tpr, 'thresholds':thresholds})


# In[44]:


df_roc['tpr - fpr'] = df_roc['tpr'] - df_roc['fpr']


# In[45]:


df_roc.sort_values('tpr - fpr', ascending=False).head()


# **–í—ã–≤–æ–¥:** –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞ –¥–æ—Ö–æ–¥–∞ (TPR) –æ—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–µ—Å–∞ –∏–∑–¥–µ—Ä–∂–µ–∫ (TPR) –ø—Ä–∏ –æ—à–∏–±–æ—á–Ω–æ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏–±—ã–ª—å –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π.

# In[46]:


print(f"""–ï—Å–ª–∏ –≤–µ—Å–∞ TPR –∏ FPR –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ç–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç 
{df_roc.sort_values('tpr - fpr', ascending=False)['thresholds'].head(1)}""")


# <div class="alert alert-block alert-danger">
# <b>‚ùå –ó–∞–º–µ—á–∞–Ω–∏–µ:</b>
# 
# –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)
#  
# –ß—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
# 1. –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
# 2. –ö–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
# </div>

# <div class="alert alert-block alert-info">
# <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> –î–æ–±–∞–≤–∏–ª –æ–±—â–∏–π –≤—ã–≤–æ–¥
# </div>

# <div class="alert alert-block alert-success">
# <b>V2 ‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</b>
# </div>

# ## –û–±—â–∏–π –≤—ã–≤–æ–¥

# 1.–ü—Ä–æ–≤–µ–ª–∏ –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π: LogisticRegression, DecisionTreeClassifier, RandomForestClassifier - –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–π–æ –≤—ã–±–æ—Ä–∫–µ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø—Ä–æ–≤–µ–ª–∏ —Ç—Ä–µ–º—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏: —Å –ø–æ–º–æ—â—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ class_weight, –∞ —Ç–∞–∫–∂–µ —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏.
# 
# 2.–ù–∞–∏–ª—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–µ—Ç—Ä–∏–∫–∏ F1 –ø–æ–∫–∞–∑–∞–ª–∞ –º–æ–¥–µ–ª—å RandomForestClassifier(max_depth=8, n_estimators=51, random_state=12345) –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –ø–æ –º–µ—Ç—Ä–∏–∫–µ F1 0.621787, –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π 0.627720. –ú–æ–¥–µ–ª—å –≤ 71% —Å–ª—É—á–∞–µ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–π–¥—É—Ç, –∏ 86% —Å–ª—É—á–∞—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è.
# 
# 3.–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç 20% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∏–¥–∞—é—Ç –±–∞–Ω–∫, —ç—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç —É–¥–µ—Ä–∂–∞–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏–∑–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.

# # <font color='orange'>–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ</font>
# * –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ
# * –í–∏–¥–Ω–æ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π
# * –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –Ω–æ—É—Ç–±—É–∫, –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã
# * –£ —Ç–µ–±—è —á–∏—Å—Ç—ã–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∫–æ–¥
# * –ú–Ω–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã
# * –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
# * –ò—Å–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
# * –ñ–¥—É –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ üëã

# # <font color='orange'>2. –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ</font>
# * –°–ø–∞—Å–∏–±–æ –∑–∞ –±—ã—Å—Ç—Ä–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
# * –¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –ª—É—á—à–µ )
# * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç
# * –ú–æ–ª–æ–¥–µ—Ü, –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!
# * –ù–∞–¥–µ—é—Å—å, —Ä–µ–≤—å—é –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º
# * –£–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–±—É—á–µ–Ω–∏–∏ üëã

# # <font color='orange'>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üî•</font>
# * –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ python –∏ pandas https://www.youtube.com/watch?v=dd3RcafdOQk&t=82s
# * –ö—É—Ä—Å "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" https://stepik.org/course/4852
# * –†–∞–∑—É–º–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è https://machinelearningmastery.ru/smarter-ways-to-encode-categorical-data-for-machine-learning-part-1-of-3-6dca2f71b159/
# * –°—Ç–∞—Ç—å—è –ø—Ä–æ "–Ω–µ–ø–æ–Ω—è—Ç–Ω—É—é" –º–µ—Ç—Ä–∏–∫—É ROC-AUC https://dyakonov.org/2017/07/28/auc-roc-–ø–ª–æ—â–∞–¥—å-–ø–æ–¥-–∫—Ä–∏–≤–æ–π-–æ—à–∏–±–æ–∫/
# * –•–æ—á–µ—à—å –ø–æ–¥—Ç—è–Ω—É—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è DS?) https://academy.stepik.org/math-for-data-science
# * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –º–æ–∂–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å üòé https://www.datatechnotes.com/2019/08/elasticnet-regression-example-in-python.html
# * –í –Ω–∞—à–µ–º –¥–µ–ª–µ –Ω—É–∂–Ω–æ –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ç–¥, –≤–æ—Ç —Ç—É—Ç –ø—É–±–ª–∏–∫—É—é—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ DS: https://www.infoq.com/data-analysis/news/
# * –í—Å–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–Ω–∏–≥—É –î–∞–Ω–∏–µ–ª–∞ –ö–∞–Ω–µ–º–∞–Ω–∞ "–î—É–º–∞–π –º–µ–¥–ª–µ–Ω–Ω–æ, —Ä–µ—à–∞–π –±—ã—Å—Ç—Ä–æ"
